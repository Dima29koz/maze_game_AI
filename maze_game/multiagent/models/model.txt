TorchActionMaskModel(
  (internal_model): A2CNetwork(
    (internal_model): ComplexInputNetwork(
      (cnns): ModuleDict(
        (field): MazeCNN(
          (_convs): Sequential(
            (0): Conv2d(13, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): Tanh()
            (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
            (3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): Tanh()
            (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
            (6): Tanh()
            (7): Flatten(start_dim=1, end_dim=-1)
          )
          (_value_branch): SlimFC(
            (_model): Sequential(
              (0): Linear(in_features=128, out_features=1, bias=True)
            )
          )
        )
        (other_stats): MazeCNN(
          (_convs): Sequential(
            (0): Conv2d(1, 4, kernel_size=(1, 4), stride=(1, 1))
            (1): Tanh()
            (2): Conv2d(4, 16, kernel_size=(6, 1), stride=(1, 1))
            (3): Tanh()
            (4): Flatten(start_dim=1, end_dim=-1)
          )
          (_value_branch): SlimFC(
            (_model): Sequential(
              (0): Linear(in_features=16, out_features=1, bias=True)
            )
          )
        )
        (stats): MazeCNN(
          (_convs): Sequential(
            (0): Conv1d(6, 16, kernel_size=(4,), stride=(1,))
            (1): Flatten(start_dim=1, end_dim=-1)
          )
          (_value_branch): SlimFC(
            (_model): Sequential(
              (0): Linear(in_features=16, out_features=1, bias=True)
            )
          )
        )
        (treasures): MazeCNN(
          (_convs): Sequential(
            (0): Conv2d(1, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): Tanh()
            (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=0, dilation=1, ceil_mode=False)
            (3): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): Tanh()
            (5): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1))
            (6): Tanh()
            (7): Flatten(start_dim=1, end_dim=-1)
          )
          (_value_branch): SlimFC(
            (_model): Sequential(
              (0): Linear(in_features=32, out_features=1, bias=True)
            )
          )
        )
        (walls): MazeCNN(
          (_convs): Sequential(
            (0): Conv3d(12, 32, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
            (1): Tanh()
            (2): MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2), padding=0, dilation=1, ceil_mode=False)
            (3): Conv3d(32, 64, kernel_size=(1, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
            (4): Tanh()
            (5): MaxPool3d(kernel_size=(2, 1, 1), stride=(2, 1, 1), padding=0, dilation=1, ceil_mode=False)
            (6): Conv3d(64, 128, kernel_size=(1, 3, 3), stride=(1, 1, 1))
            (7): Tanh()
            (8): Flatten(start_dim=1, end_dim=-1)
          )
          (_value_branch): SlimFC(
            (_model): Sequential(
              (0): Linear(in_features=128, out_features=1, bias=True)
            )
          )
        )
      )
    )
    (policy_net): FullyConnectedNetwork(
      (_logits): SlimFC(
        (_model): Sequential(
          (0): Linear(in_features=64, out_features=320, bias=True)
        )
      )
      (_hidden_layers): Sequential(
        (0): SlimFC(
          (_model): Sequential(
            (0): Linear(in_features=320, out_features=64, bias=True)
            (1): ReLU()
          )
        )
        (1): SlimFC(
          (_model): Sequential(
            (0): Linear(in_features=64, out_features=64, bias=True)
            (1): ReLU()
          )
        )
      )
      (_value_branch_separate): Sequential(
        (0): SlimFC(
          (_model): Sequential(
            (0): Linear(in_features=320, out_features=64, bias=True)
            (1): ReLU()
          )
        )
        (1): SlimFC(
          (_model): Sequential(
            (0): Linear(in_features=64, out_features=64, bias=True)
            (1): ReLU()
          )
        )
      )
      (_value_branch): SlimFC(
        (_model): Sequential(
          (0): Linear(in_features=64, out_features=1, bias=True)
        )
      )
    )
    (value_net): FullyConnectedNetwork(
      (_logits): SlimFC(
        (_model): Sequential(
          (0): Linear(in_features=64, out_features=320, bias=True)
        )
      )
      (_hidden_layers): Sequential(
        (0): SlimFC(
          (_model): Sequential(
            (0): Linear(in_features=320, out_features=64, bias=True)
            (1): ReLU()
          )
        )
        (1): SlimFC(
          (_model): Sequential(
            (0): Linear(in_features=64, out_features=64, bias=True)
            (1): ReLU()
          )
        )
      )
      (_value_branch_separate): Sequential(
        (0): SlimFC(
          (_model): Sequential(
            (0): Linear(in_features=320, out_features=64, bias=True)
            (1): ReLU()
          )
        )
        (1): SlimFC(
          (_model): Sequential(
            (0): Linear(in_features=64, out_features=64, bias=True)
            (1): ReLU()
          )
        )
      )
      (_value_branch): SlimFC(
        (_model): Sequential(
          (0): Linear(in_features=64, out_features=1, bias=True)
        )
      )
    )
    (logits_layer): SlimFC(
      (_model): Sequential(
        (0): Linear(in_features=320, out_features=13, bias=True)
      )
    )
    (value_layer): SlimFC(
      (_model): Sequential(
        (0): Linear(in_features=320, out_features=1, bias=True)
      )
    )
  )
)